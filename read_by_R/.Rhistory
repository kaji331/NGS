summary(fit4)
anova(fit4)
contrast(fit4,list(leg="L2",type="pull"),list(leg="L1",type="pull"))
contrast(fit4,list(leg="L2",type="push"),list(leg="L1",type="push"))
N <- 40
p <- 4
group <- factor(rep(1:p,each=N/p))
X <- model.matrix(~ group)
Y <- rnorm(N,mean=42,7)
mu0 <- mean(Y)
initial.ss <- sum((Y - mu0)^2)
s <- split(Y, group)
after.group.ss <- sum(sapply(s, function(x) sum((x - mean(x))^2)))
(group.ss <- initial.ss - after.group.ss)
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
f.value <- group.ms / after.group.ms
F_1000 <- function(){
Y <- rnorm(N,mean=42,7)
mu0 <- mean(Y)
initial.ss <- sum((Y-mu0)^2)
s <- split(Y,group)
after.group.ss <- sum(sapply(s,function(x) sum((x-mean(x))^2)))
group.ss <- initial.ss-after.group.ss
group.ms <- group.ss/(p-1)
after.group.ms <- after.group.ss/(N-p)
f.value <- group.ms/after.group.ms
return(f.value)
}
replicate(1000,F_1000) %>>% mean
replicate(1000,F_1000()) %>>% mean
replicate(1000,F_1000()) %>>% hist
xs <- seq(from=0,to=6,length=100)
lines(xs, df(xs, df1 = p - 1, df2 = N - p), col="red")
spider$group <- factor(paste0(spider$leg, spider$type))
?paste0
head(spider)
fit4 <- lm(friction~0+group,data=friction)
fit4 <- lm(friction~0+group,data=spider)
summary(fit4)
anova(fit4)
sex <- factor(rep(c("female","male"),each=4))
trt <- factor(c("A","A","B","B","C","C","D","D"))
X <- model.matrix( ~ sex + trt)
X
qr(X)$rank
Y <- 1:8
makeYstar <- function(a,b) Y - X[,2] * a - X[,5] * b
fitTheRest <- function(a,b) {
Ystar <- makeYstar(a,b)
Xrest <- X[,-c(2,5)]
betarest <- solve(t(Xrest) %*% Xrest) %*% t(Xrest) %*% Ystar
residuals <- Ystar - Xrest %*% betarest
sum(residuals^2)
}
fitTheRest(1,2)
outer(1:3,1:3,`*`)
outer(-2:8,-2:8,Vectorize(fitTheRest))
fitTheRest(1,1)
fitTheRest(-2,-2)
outer(-2:8,-2:8,Vectorize(fitTheRest)) %>>% imagemat
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv(filename, skip=1)
fit <- lm(friction ~ type + leg, data=spider)
betahat <- coef(fit)
betahat
Y <- matrix(spider$friction, ncol=1)
Y
X <- model.matrix(~ type + leg, data=spider)
QR <-qr(X)
Q <- qr.Q(X)
Q <- qr.Q(QR)
R <- qr.R(QR)
Q[1,1]
R[1,1]
crossprod(Q,y)
crossprod(Q,y)[1,1]
head(y)
class(y)
y <- matrix(y,1)
crossprod(Q,y)[1,1]
y <- matrix(y[,1],col(y),1)
crossprod(Q,y)[1,1]
head(y)
crossprod(Q,Y)
solve(R)%*%crossprod(Q,Y)
summary(fit)
cases = rnorm(10,30,2)
controls = rnorm(10,30,2)
t.test(cases,controls)
t <- function(){
return(t.test(rnorm(10,30,2),rnorm(10,30,2)))}
set.seed(100)
test <- replicate(1000,t())
test[1,1]
dim(test)
t[,1]
test[,1]
p <- test["p.value",]
length(p[p < 0.05])
40/1000
pvals <- replicate(1000,{
}
)
set.seed(100)
pvals <- replicate(1000,{
cases = rnorm(10,30,2)
controls = rnorm(10,30,2)
t.test(cases,controls)$p.val})
pvals[pvals < 0.05] %>>% length
pvals[pvals <= 0.05] %>>% length
set.seed(100)
pvals <- replicate(20,{
cases = rnorm(10,30,2)
controls = rnorm(10,30,2)
t.test(cases,controls)$p.val})
pvals[pvals <= 0.05] %>>% length
pvals[pvals < 0.05] %>>% length
set.seed(100)
p <- replicate(1000,{
replicate(20,{
cases <- rnorm(10,30,2)
controls <- rnorm(10,30,2)
t.test(cases.controls)$p.val}))
p <- function(){
pvals <- replicate(20,{
cases <- rnorm(10,30,2)
controls <- rnorm(10,30,2)
t.test(cases,controls)$p.val})
length(pvals[pvals<0.05])}
pp <- replicate(1000,p())
mean(pp)
length(pp[pp>0])
set.see(100)
set.seed(100)
pp <- replicate(8793,p())
length(pp[pp>0])/8793
1-mean(pp<0.05)
p <- function(){
pvals <- replicate(8793,{
cases <- rnorm(10,30,2)
controls <- rnorm(10,30,2)
t.test(cases,controls)$p.val})
length(pvals[pvals<0.05])}
set.seed(100)
pp <- replicate(1000,p())
1-mean(pp<0.05)
head(pp)
tail(pp)
mean(pp)
length(pp[pp>0])/1000
mean(pp/8793)
biocLite("COPDSexualDimorphism.data")
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
expr.meta
expr.meta %>>% head
expr.meta[expr.meta$GENDER=="2-Female",] %>>% nrow
expr.meta[,"pkyrs"] %>>% median
expr.meta[,"pkyrs"] %>>% qqplot
expr.meta[,"pkyrs"] %>>% length
expr.meta[,"pkyrs"] %>>% (qqplot(1:229,.))
library(BSgenome.Hsapiens.UCSC.hg19)
BSgenome.Hsapiens.UCSC.hg19
chr11seq <- BSgenome.Hsapiens.UCSC.hg19[["chr11"]]
subseq(chr11seq,start=10^6,width=25)
countPattern(c("ATG","TGA","TAA","TAG"),chr11seq)
countPattern("ATG",chr11seq)
countPattern(TGA",chr11seq)
""
countPattern("TGA",chr11seq)
countPattern("TAA",chr11seq)
countPattern("TAG",chr11seq)
chr7seq <- BSgenome.Hsapiens.UCSC.hg19[["chr7"]]
alphabetFrequency(chr7seq)
alphabetFrequency(chr7seq)[2]
alphabetFrequency(chr7seq)[2]/sum(alphabetFrequency(chr7seq))
library(BiocInstaller)
biocLite("SNPlocs.Hsapiens.dbSNP.20120608")
library(SNPlocs.Hsapiens.dbSNP.20120608)
s17 = getSNPlocs("ch17")
head(s17)
s17[s17[,1]=="73971683",]
library(devtools)
install_github("genomicsclass/tissuesGeneExpression")
library(tissuesGeneExpression)
data(tissuesGeneExpression)
head(e[,1:5])
table(tissue)
e[rownames(e)=="209169_at",] %>>% boxplot
e[rownames(e)=="209169_at",]
f <- e[rownames(e)=="209169_at",]
table(tissue)
head(tissue)
names(f) <- tissue
boxplot(f)
?boxplot
boxplot(f,names=names(f))
names(f) %>>% length
length(f)
s <- split(f,names(f))
boxplot(s)
s1 <- split(f,names(e[rownames(e)=="209169_at",]))
boxplot(s1)
IDs = c("201884_at", "209169_at", "206269_at", "207437_at", "219832_s_at", "212827_at")
f <- e[rownames(e)==IDs,]
f <- e[rownames(e)==IDs,]
f <- e[rownames(e)=="201884_at",]
f <- e[rownames(e)==c("201884_at","209169_at"),]
f <- e[rownames(e)==("201884_at"|"209169_at"),]
f <- e[match(rownames(e),IDs),]
head(f[,1:2])
?match
f <- e[rownames(e) %in% IDs,]
head(f[,1:2])
f[,1:2]
colnames(f) <- tissue
boxplot(f)
boxplot(f[,"placenta"])
plot(f[,"placenta"])
library(GSE5859)
data(GSE5859)
class(e)
install_github("genomicsclass/GSE5859")
library(GSE5859)
data(GSE5859)
class(e)
dat = exprs(e)
dim(dat)
sampleInfo <- pData(e)
dim(sampleInfo)
head(sampleInfo)
library(hgfocus.db)
annot = select(hgfocus.db,
keys=featureNames(e),
keytype="PROBEID",
columns=c("CHR", "CHRLOC", "SYMBOL"))
## here we pick one column from the annotation
annot = annot[ match(featureNames(e),annot$PROBEID), ]
head(annot)
dim(annot)
biocLite("hgfocus.db")
library(hgfocus.db)
annot = select(hgfocus.db,
keys=featureNames(e),
keytype="PROBEID",
columns=c("CHR", "CHRLOC", "SYMBOL"))
## here we pick one column from the annotation
annot = annot[ match(featureNames(e),annot$PROBEID), ]
head(annot)
dim(annot)
biocLite("Homo.sapiens")
library(Homo.sapiens)
class(Homo.sapiens)
keytypes(Homo.sapiens)
columns(Homo.sapiens)
head(keys(Homo.sapiens, keytype="ENTREZID"))
unique(keys(Homo.sapiens, keytype="ENTREZID"))
unique(keys(Homo.sapiens, keytype="ENTREZID")) %>>% length
unique(keys(Homo.sapiens, keytype="ENTREZID")) %>>% sum
unique(keys(Homo.sapiens, keytype="ENTREZID")) %>>% head
unique(keys(Homo.sapiens, keytype="ENTREZID")) %>>% tail
(keys(Homo.sapiens, keytype="ENTREZID")) %>>% length
unique(keys(Homo.sapiens, keytype="ENTREZID")) %>>% length
keytypes(Homo.sapiens)
columns(Homo.sapiens)
Homo.sapiens[,"ENTREZID"] %>>% length
columns(Homo.sapiens,keytypes="ENTREZID")
keys(Homo.sapiens,keytypes="ENTREZID")
columns(Homo.sapiens,keytype="ENTREZID") %>>% nrow
unique(keys(Homo.sapiens, keytype="ENTREZID")) %>>% nrow
unique(keys(Homo.sapiens, keytype="ENTREZID")) %>>% class
Homo.sapiens
unique(keys(Homo.sapiens, keytype="ENTREZID")) %>>% sum
unique(keys(Homo.sapiens, keytype="ENTREZID")) %>>% head
unique(keys(Homo.sapiens, keytype="ENTREZID")) %>>% tail
unique(keys(Homo.sapiens, keytype="ENTREZID")) %>>% as.numeric %>>% sum
unique(keys(Homo.sapiens, keytype="ENTREZID")) %>>% length
(keys(Homo.sapiens, keytype="ENTREZID")) %>>% tail
?unique
unique(keys(Homo.sapiens, keytype="ENTREZID"),incomparables=T) %>>% length
uniqueLetters(keys(Homo.sapiens, keytype="ENTREZID")) %>>% length
union(keys(Homo.sapiens, keytype="ENTREZID")) %>>% length
unique.array(keys(Homo.sapiens, keytype="ENTREZID")) %>>% length
unique.default(keys(Homo.sapiens, keytype="ENTREZID")) %>>% length
unique.Vector(keys(Homo.sapiens, keytype="ENTREZID")) %>>% length
duplicated(keys(Homo.sapiens, keytype="ENTREZID")) %>>% length
?duplicated
!duplicated(keys(Homo.sapiens, keytype="ENTREZID")) %>>% length
(keys(Homo.sapiens, keytype="ENTREZID")%in%keys(Homo.sapiens,keytype="ENTREZID")) %>>% length
Homo.sapiens
Homo.sapiens@keys
Homo.sapiens@keys["ENTREZID"]
Homo.sapiens@keys[["ENTREZID"]]
Homo.sapiens@keys$ENTREZID
unique(keys(Homo.sapiens, keytype="ENSEMBL")) %>>% length
select(Homo.sapiens, key="123", keytype="ENTREZID", columns=c("SYMBOL", "ENSEMBL", "ENTREZID", "CHR"))
columns(Homo.sapiens)["ENTREZID"]
columns(Homo.sapiens)[,"ENTREZID"]
columns(Homo.sapiens)
select(Homo.sapiens, key="9575", keytype="ENTREZID", columns=c("SYMBOL", "ENSEMBL", "ENTREZID", "CHR"))
tab = select(Homo.sapiens, key="circadian rhythm", keytype="TERM", columns=c("ENTREZID"))
head(tab)
unique(tab$ENTREZID)
unique(tab$ENTREZID) %>>% length
unique(order(tab$ENTREZID)) %>>% length
unique(order(tab$ENTREZID))
order(tab$ENTREZID)
unique(sort(tab$ENTREZID)) %>>% length
unique(sort(keys(Homo.sapiens, keytype="ENSEMBL"))) %>>% length
?sort
unique(sort(keys(Homo.sapiens, keytype="ENSEMBL"),decreasing=T)) %>>% length
data(sample.ExpressionSet)
sample.ExpressionSet
samp = sample.ExpressionSet
s <- samp[samp$sex=="female"]
e <- expr(s)
e <- exprs(s)
sum(e[1,])
e
s
pData(s)
exprs(e)
experimentData(e)
experimentData(s)
exprs(s)
experimentData(s)
experimentData(s)[1,]
s <- samp[samp$sex=="Female"]
experimentData(s)
dim(s)
s[1,]
s[1,] %>>% sum
rowSums(s)
exprs(s)[1,] %>>% sum
exprs(s) %>>% head
exprs(s)[,1] %>>% sum
pData(s)
pData(s)[which(s$sex=="Female")]
pData(s)[which(sex=="Female")]
pData(s)[which(s=="Female")]
pData(s)[which(s$sex=="Female"),]
s[pData(s)==pData(s)[which(s$sex=="Female"),]]
s[pData(s)[which(s$sex=="Female"),]]
exprs(s)[pData(s)[which(s$sex=="Female"),]]
exprs(pData(s)[which(s$sex=="Female"),])
ALL
data(ALL)
library(ALL)
data(ALL)
ALL
s
s[,which(as.character(s$sex) %in% "Female")]
s[,which(as.character(s$sex) %in% "Female")] %>>% exprs
s[,which(as.character(s$sex) %in% "Female")] %>>% exprs %>>% head
e <- s[,which(as.character(s$sex) %in% "Female")] %>>% exprs
sum(e[1,])
annotation(e)
experimentData(s) %>>% annotation
experimentData(s)
annotation(s)
pData(samp)
pData(samp)$score
exprs(samp) %>>% head
exprs(samp) %>>% tail
exprs(samp)[rownames(exprs(samp))=="31489_at",]
t2 <- exprs(samp)[rownames(exprs(samp))=="31489_at",]
t1 <- pData(samp)$score
cor(t1,t2)
library(devtools)
install_github("genomicsclass/ERBS")
library(ERBS)
data(HepG2)
class(HepG2)
HepG2
mcols(HepG2) %>>% head
mcols(HepG2)$signalValue %>>% median
mcols(HepG2)$signalValue %>>% (which(max(.)))
mcols(HepG2) %>>% tail
HepG2[sort(HepG2$signalValue,decreasing=T),] %>>% head
?sort
sort(HepG2[order(HepG2$signalValue),]) %>>% head
sort(HepG2[order(HepG2$signalValue),],decreasing=T) %>>% head
sort(HepG2[order(HepG2$signalValue),]) %>>% tail
sort(HepG2[HepG2$signalValue,]) %>>% tail
sort(HepG2[HepG2$signalValue,]) %>>% head
HepG2[order(HepG2$signalValue),] %>>% tail
HepG2[HepG2$seqnames=="chr16",] %>>% nrow
HepG2[seqnames(HepG2)=="chr16",] %>>% nrow
HepG2[seqnames(HepG2)=="chr16",] %>>% head
HepG2[seqnames(HepG2)=="chr16",]
width(HepG2)
width(HepG2) %>>% median
width(HepG2) %>>% hist
library(IRanges)
IRanges(start=101,end=200)
ir <- IRanges(start=101,end=200)
ir*2
narrow(ir,start=20)
width(ir+200)
ir+200
width(ir+25)
ir <- IRanges(start=11121,end=31527)
ir <- IRanges(start=c(1,11,21),end=c(3,15,27))
width(ir)
width(ir) %>>% sum
ir <- IRanges(start=c(101,106,201,211,221,301,306,311,351,361,401,411,501),end=c(150,160,210,270,225,310,310,330,390,380,415,470,510))
plotRanges(ir)
library(rafalib)
plotRanges(ir)
install_github("genomicsclass/ph525x")
library(ph525x)
plotRanges(ir)
c(201-160, 301-270, 351-330, 401-390, 501-470) %>>% sum
c(201-160, 301-270, 351-330, 401-390, 501-470)
disjointBins(ir)
disjointBins(ir) %>>% sum
disjoint(ir) %>>% sum
disjoin(ir) %>>% sum
disjoin(ir)
disjoin(ir) %>>% nrow
disjoin(ir) %>>% rowRanges
par(mfrow=c(2,1))
plotRanges(ir)
plotRanges(resize(ir,1))
plotRanges(x, xlim=c(0,600))
plotRanges(ir, xlim=c(0,600))
plotRanges(resize(ir,1), xlim=c(0,600))
x = GRanges("chr1", IRanges(c(1,101),c(50,150)), strand=c("+","-"))
ranges(x)
plotGRanges = function(x) plotRanges(ranges(x))
plotGRanges(x)
plotGRanges(resize(x,1))
x = GRanges("chr1", IRanges(c(101,201,401,501),c(150,250,450,550)), strand="+")
y = GRanges("chr1", IRanges(c(101,221,301,401,541),c(150,250,350,470,550)), strand="+")
plotGRanges(x)
plotGRanges(y)
GRangesList(x,y)
gr1 <- GRangesList(x,y)
gr2 <- c(x,y)
plotGRanges(gr1)
plotGRanges(gr2)
disjoin(gr2) %over% gr1
disjoin(gr2) %over% gr2
disjoin(gr2)
disjoin(gr2) %over% x
disjoin(gr2) %over% y
disjoin(gr2)[(disjoin(gr2) %over% x) & (disjoin(gr2) %over% y)] %>>% width %>>% sum
disjoin(gr2)[(disjoin(gr2) %over% gr2] %>>% width %>>% sum
disjoin(gr2) %>>% width %>>% sum
270 -140
z <- GRanges("chr1",range(ranges(x)),strand=c("+","-"))
plotGRanges(z)
ranges(x) %over% z
x %over% z
(x %over% z) %>>% sum
x
z
z <- GRanges("chr1",ranges(x),strand=c("+","-"))
plotGRanges(x)
plotGRanges(z)
x %over% z
library(ERBS)
data(HepG2)
data(GM12878)
HepG2[17,]
distanceToNearest(GM12878,HepG2[17,])
d <- distanceToNearest(GM12878,HepG2[17,])
d[order(d$distance),]
d[order(distance(d)),]
d@metadata
d@queryLength
d@subjectLength
d@elementMetadata
d[order(d@elementMetadata),]
d <- as.data.frame(d)
d[order(d@elementMetadata),]
d[order(d$distance),]
d[order(d$distance),] %>>% head
GM12878
GM12878[GM12878$name=="24",]
GM12878[24,]
d[d$distance="2284,"]
d[d$distance=="2284,"]
d
GM12878
GM12878[GM12878$name==945,]
GM12878[GM12878$name==24,]
chooseCRANmirror()
options(repos)
options("repos")
chooseCRANmirror()
chooseCRANmirror()
options("repos")
chooseCRANmirror()
options("repos")
chooseCRANmirror()
options("repos")
chooseCRANmirror()
options("repos")
chooseCRANmirror()
options("repos")
chooseBioCmirror()
options(BioC_mirror)
options("BioC_mirror")
biocLite()
setwd("~/Projects/NGS/read_by_R/")
load("temp.rda")
write.csv(fc$counts,file="counts.csv")
